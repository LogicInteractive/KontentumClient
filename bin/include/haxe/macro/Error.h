// Generated by Haxe 3.4.3
#ifndef INCLUDED_haxe_macro_Error
#define INCLUDED_haxe_macro_Error

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,macro,Error)

namespace haxe{
namespace macro{


class HXCPP_CLASS_ATTRIBUTES Error_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Error_obj OBJ_;
		Error_obj();

	public:
		enum { _hx_ClassId = 0x7d7182e2 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="haxe.macro.Error")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"haxe.macro.Error"); }

		hx::ObjectPtr< Error_obj > __new() {
			hx::ObjectPtr< Error_obj > __this = new Error_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Error_obj > __alloc(hx::Ctx *_hx_ctx) {
			Error_obj *__this = (Error_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Error_obj), false, "haxe.macro.Error"));
			*(void **)__this = Error_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Error_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Error","\xa8","\x3b","\x57","\x06"); }

};

} // end namespace haxe
} // end namespace macro

#endif /* INCLUDED_haxe_macro_Error */ 
