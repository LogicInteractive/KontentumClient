// Generated by Haxe 3.4.3
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_sys_net__Socket_SocketInput
#include <sys/net/_Socket/SocketInput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6525339a79073487_32_new,"sys.net._Socket.SocketInput","new",0x5fe92abb,"sys.net._Socket.SocketInput.new","C:\\HaxeToolkit\\haxe\\std/cpp/_std/sys/net/Socket.hx",32,0xa375f0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_6525339a79073487_36_readByte,"sys.net._Socket.SocketInput","readByte",0xee593543,"sys.net._Socket.SocketInput.readByte","C:\\HaxeToolkit\\haxe\\std/cpp/_std/sys/net/Socket.hx",36,0xa375f0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_6525339a79073487_48_readBytes,"sys.net._Socket.SocketInput","readBytes",0x9fb565d0,"sys.net._Socket.SocketInput.readBytes","C:\\HaxeToolkit\\haxe\\std/cpp/_std/sys/net/Socket.hx",48,0xa375f0f1)
HX_LOCAL_STACK_FRAME(_hx_pos_6525339a79073487_65_close,"sys.net._Socket.SocketInput","close",0xbbc7fed3,"sys.net._Socket.SocketInput.close","C:\\HaxeToolkit\\haxe\\std/cpp/_std/sys/net/Socket.hx",65,0xa375f0f1)
namespace sys{
namespace net{
namespace _Socket{

void SocketInput_obj::__construct( ::Dynamic s){
            	HX_STACKFRAME(&_hx_pos_6525339a79073487_32_new)
HXDLIN(  32)		this->__s = s;
            	}

Dynamic SocketInput_obj::__CreateEmpty() { return new SocketInput_obj; }

void *SocketInput_obj::_hx_vtable = 0;

Dynamic SocketInput_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SocketInput_obj > _hx_result = new SocketInput_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SocketInput_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x20d9c985) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x20d9c985;
	} else {
		return inClassId==(int)0x5c18cd32;
	}
}

int SocketInput_obj::readByte(){
            	HX_GC_STACKFRAME(&_hx_pos_6525339a79073487_36_readByte)
HXDLIN(  36)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  37)			return _hx_std_socket_recv_char(this->__s);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(  39)				if (hx::IsEq( e,HX_("Blocking",d5,e1,61,f3) )) {
HXLINE(  40)					HX_STACK_DO_THROW(::haxe::io::Error_obj::Blocked_dyn());
            				}
            				else {
HXLINE(  41)					if (hx::IsNull( this->__s )) {
HXLINE(  42)						HX_STACK_DO_THROW(::haxe::io::Error_obj::Custom(e));
            					}
            					else {
HXLINE(  44)						HX_STACK_DO_THROW( ::haxe::io::Eof_obj::__alloc( HX_CTX ));
            					}
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  36)		return (int)0;
            	}


int SocketInput_obj::readBytes( ::haxe::io::Bytes buf,int pos,int len){
            	HX_GC_STACKFRAME(&_hx_pos_6525339a79073487_48_readBytes)
HXLINE(  49)		int r;
HXLINE(  50)		if (hx::IsNull( this->__s )) {
HXLINE(  51)			HX_STACK_DO_THROW(HX_("Invalid handle",d1,71,75,85));
            		}
HXLINE(  52)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(  53)			r = _hx_std_socket_recv(this->__s,buf->b,pos,len);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e = _hx_e;
HXLINE(  55)				if (hx::IsEq( e,HX_("Blocking",d5,e1,61,f3) )) {
HXLINE(  56)					HX_STACK_DO_THROW(::haxe::io::Error_obj::Blocked_dyn());
            				}
            				else {
HXLINE(  58)					HX_STACK_DO_THROW(::haxe::io::Error_obj::Custom(e));
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  60)		if ((r == (int)0)) {
HXLINE(  61)			HX_STACK_DO_THROW( ::haxe::io::Eof_obj::__alloc( HX_CTX ));
            		}
HXLINE(  62)		return r;
            	}


void SocketInput_obj::close(){
            	HX_STACKFRAME(&_hx_pos_6525339a79073487_65_close)
HXLINE(  66)		this->super::close();
HXLINE(  67)		if (hx::IsNotNull( this->__s )) {
HXLINE(  67)			_hx_std_socket_close(this->__s);
            		}
            	}



hx::ObjectPtr< SocketInput_obj > SocketInput_obj::__new( ::Dynamic s) {
	hx::ObjectPtr< SocketInput_obj > __this = new SocketInput_obj();
	__this->__construct(s);
	return __this;
}

hx::ObjectPtr< SocketInput_obj > SocketInput_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic s) {
	SocketInput_obj *__this = (SocketInput_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SocketInput_obj), true, "sys.net._Socket.SocketInput"));
	*(void **)__this = SocketInput_obj::_hx_vtable;
	__this->__construct(s);
	return __this;
}

SocketInput_obj::SocketInput_obj()
{
}

void SocketInput_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SocketInput);
	HX_MARK_MEMBER_NAME(__s,"__s");
	HX_MARK_END_CLASS();
}

void SocketInput_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(__s,"__s");
}

hx::Val SocketInput_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"__s") ) { return hx::Val( __s ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"close") ) { return hx::Val( close_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readByte") ) { return hx::Val( readByte_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"readBytes") ) { return hx::Val( readBytes_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val SocketInput_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"__s") ) { __s=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SocketInput_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("__s","\x53","\x69","\x48","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo SocketInput_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(SocketInput_obj,__s),HX_HCSTRING("__s","\x53","\x69","\x48","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *SocketInput_obj_sStaticStorageInfo = 0;
#endif

static ::String SocketInput_obj_sMemberFields[] = {
	HX_HCSTRING("__s","\x53","\x69","\x48","\x00"),
	HX_HCSTRING("readByte","\x7e","\xf9","\x1a","\x69"),
	HX_HCSTRING("readBytes","\x35","\x55","\x7f","\x8e"),
	HX_HCSTRING("close","\xb8","\x17","\x63","\x48"),
	::String(null()) };

static void SocketInput_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(SocketInput_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void SocketInput_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(SocketInput_obj::__mClass,"__mClass");
};

#endif

hx::Class SocketInput_obj::__mClass;

void SocketInput_obj::__register()
{
	hx::Object *dummy = new SocketInput_obj;
	SocketInput_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("sys.net._Socket.SocketInput","\x49","\xb1","\x40","\x2c");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = SocketInput_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(SocketInput_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< SocketInput_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = SocketInput_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SocketInput_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SocketInput_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace sys
} // end namespace net
} // end namespace _Socket
