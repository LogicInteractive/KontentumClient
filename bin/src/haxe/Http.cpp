// Generated by Haxe 3.4.3
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_List
#include <List.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED__List_ListNode
#include <_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_Http
#include <haxe/Http.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesBuffer
#include <haxe/io/BytesBuffer.h>
#endif
#ifndef INCLUDED_haxe_io_BytesOutput
#include <haxe/io/BytesOutput.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <haxe/io/Error.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_sys_net_Host
#include <sys/net/Host.h>
#endif
#ifndef INCLUDED_sys_net_Socket
#include <sys/net/Socket.h>
#endif
#ifndef INCLUDED_sys_ssl_Socket
#include <sys/ssl/Socket.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fedd768dee4a1715_79_new,"haxe.Http","new",0x57ac51e2,"haxe.Http.new","C:\\HaxeToolkit\\haxe\\std/haxe/Http.hx",79,0xd46eaf46)
HX_LOCAL_STACK_FRAME(_hx_pos_fedd768dee4a1715_390_request,"haxe.Http","request",0xb2c949d1,"haxe.Http.request","C:\\HaxeToolkit\\haxe\\std/haxe/Http.hx",390,0xd46eaf46)
HX_LOCAL_STACK_FRAME(_hx_pos_fedd768dee4a1715_189_request,"haxe.Http","request",0xb2c949d1,"haxe.Http.request","C:\\HaxeToolkit\\haxe\\std/haxe/Http.hx",189,0xd46eaf46)
static const bool _hx_array_data_eaa978f0_3[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_fedd768dee4a1715_425_customRequest,"haxe.Http","customRequest",0x68e97fa0,"haxe.Http.customRequest","C:\\HaxeToolkit\\haxe\\std/haxe/Http.hx",425,0xd46eaf46)
static const ::String _hx_array_data_eaa978f0_10[] = {
	HX_("--",60,27,00,00),
};
static const ::String _hx_array_data_eaa978f0_11[] = {
	HX_("\r\n",5d,0b,00,00),
};
static const ::String _hx_array_data_eaa978f0_12[] = {
	HX_("Content-Disposition: form-data; name=\"",bf,46,3a,1c),
};
static const ::String _hx_array_data_eaa978f0_13[] = {
	HX_("\"",22,00,00,00),
};
static const ::String _hx_array_data_eaa978f0_14[] = {
	HX_("\r\n",5d,0b,00,00),
};
static const ::String _hx_array_data_eaa978f0_15[] = {
	HX_("\r\n",5d,0b,00,00),
};
static const ::String _hx_array_data_eaa978f0_16[] = {
	HX_("\r\n",5d,0b,00,00),
};
static const ::String _hx_array_data_eaa978f0_17[] = {
	HX_("--",60,27,00,00),
};
static const ::String _hx_array_data_eaa978f0_18[] = {
	HX_("\r\n",5d,0b,00,00),
};
static const ::String _hx_array_data_eaa978f0_19[] = {
	HX_("Content-Disposition: form-data; name=\"",bf,46,3a,1c),
};
static const ::String _hx_array_data_eaa978f0_20[] = {
	HX_("\"; filename=\"",b3,3a,e5,4f),
};
static const ::String _hx_array_data_eaa978f0_21[] = {
	HX_("\"",22,00,00,00),
};
static const ::String _hx_array_data_eaa978f0_22[] = {
	HX_("\r\n",5d,0b,00,00),
};
static const ::String _hx_array_data_eaa978f0_23[] = {
	HX_(" ",20,00,00,00),
};
static const ::String _hx_array_data_eaa978f0_24[] = {
	HX_("POST ",c0,87,85,44),
};
static const ::String _hx_array_data_eaa978f0_25[] = {
	HX_("GET ",ea,ca,22,2f),
};
static const ::String _hx_array_data_eaa978f0_26[] = {
	HX_("http://",52,75,cd,5a),
};
static const ::String _hx_array_data_eaa978f0_27[] = {
	HX_(":",3a,00,00,00),
};
static const ::String _hx_array_data_eaa978f0_28[] = {
	HX_("&",26,00,00,00),
};
static const ::String _hx_array_data_eaa978f0_29[] = {
	HX_("?",3f,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_fedd768dee4a1715_527_customRequest,"haxe.Http","customRequest",0x68e97fa0,"haxe.Http.customRequest","C:\\HaxeToolkit\\haxe\\std/haxe/Http.hx",527,0xd46eaf46)
static const ::String _hx_array_data_eaa978f0_31[] = {
	HX_("Content-Type: ",f4,2b,e6,1d),
};
static const ::String _hx_array_data_eaa978f0_32[] = {
	HX_("multipart/form-data",f0,f8,88,db),
};
static const ::String _hx_array_data_eaa978f0_33[] = {
	HX_("; boundary=",ee,f7,f2,1a),
};
static const ::String _hx_array_data_eaa978f0_34[] = {
	HX_("application/x-www-form-urlencoded",9e,61,91,fa),
};
static const ::String _hx_array_data_eaa978f0_35[] = {
	HX_("\r\n",5d,0b,00,00),
};
static const ::String _hx_array_data_eaa978f0_36[] = {
	HX_("Connection: close\r\n",31,73,d3,b4),
};
static const ::String _hx_array_data_eaa978f0_37[] = {
	HX_(": ",a6,32,00,00),
};
static const ::String _hx_array_data_eaa978f0_38[] = {
	HX_("\r\n",5d,0b,00,00),
};
static const ::String _hx_array_data_eaa978f0_39[] = {
	HX_("\r\n",5d,0b,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_fedd768dee4a1715_585_readHttpResponse,"haxe.Http","readHttpResponse",0x6bff43dd,"haxe.Http.readHttpResponse","C:\\HaxeToolkit\\haxe\\std/haxe/Http.hx",585,0xd46eaf46)
HX_LOCAL_STACK_FRAME(_hx_pos_fedd768dee4a1715_727_readChunk,"haxe.Http","readChunk",0xeebfa239,"haxe.Http.readChunk","C:\\HaxeToolkit\\haxe\\std/haxe/Http.hx",727,0xd46eaf46)
HX_LOCAL_STACK_FRAME(_hx_pos_fedd768dee4a1715_793___default_onData,"haxe.Http","__default_onData",0x0e426245,"haxe.Http.__default_onData","C:\\HaxeToolkit\\haxe\\std/haxe/Http.hx",793,0xd46eaf46)
HX_LOCAL_STACK_FRAME(_hx_pos_fedd768dee4a1715_803___default_onError,"haxe.Http","__default_onError",0x0a75574d,"haxe.Http.__default_onError","C:\\HaxeToolkit\\haxe\\std/haxe/Http.hx",803,0xd46eaf46)
HX_LOCAL_STACK_FRAME(_hx_pos_fedd768dee4a1715_813___default_onStatus,"haxe.Http","__default_onStatus",0xd0ca700d,"haxe.Http.__default_onStatus","C:\\HaxeToolkit\\haxe\\std/haxe/Http.hx",813,0xd46eaf46)
HX_LOCAL_STACK_FRAME(_hx_pos_fedd768dee4a1715_832_requestUrl,"haxe.Http","requestUrl",0x3bd0d21e,"haxe.Http.requestUrl","C:\\HaxeToolkit\\haxe\\std/haxe/Http.hx",832,0xd46eaf46)
HX_LOCAL_STACK_FRAME(_hx_pos_fedd768dee4a1715_835_requestUrl,"haxe.Http","requestUrl",0x3bd0d21e,"haxe.Http.requestUrl","C:\\HaxeToolkit\\haxe\\std/haxe/Http.hx",835,0xd46eaf46)
HX_LOCAL_STACK_FRAME(_hx_pos_fedd768dee4a1715_825_requestUrl,"haxe.Http","requestUrl",0x3bd0d21e,"haxe.Http.requestUrl","C:\\HaxeToolkit\\haxe\\std/haxe/Http.hx",825,0xd46eaf46)
HX_LOCAL_STACK_FRAME(_hx_pos_fedd768dee4a1715_65_boot,"haxe.Http","boot",0x57345470,"haxe.Http.boot","C:\\HaxeToolkit\\haxe\\std/haxe/Http.hx",65,0xd46eaf46)
namespace haxe{

void Http_obj::__construct(::String url){
            	HX_GC_STACKFRAME(&_hx_pos_fedd768dee4a1715_79_new)
HXLINE(  80)		this->url = url;
HXLINE(  81)		this->headers =  ::List_obj::__alloc( HX_CTX );
HXLINE(  82)		this->params =  ::List_obj::__alloc( HX_CTX );
HXLINE(  88)		this->cnxTimeout = (int)10;
            	}

Dynamic Http_obj::__CreateEmpty() { return new Http_obj; }

void *Http_obj::_hx_vtable = 0;

Dynamic Http_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Http_obj > _hx_result = new Http_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Http_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x09372f0e;
}

void Http_obj::request( ::Dynamic post){
            		HX_BEGIN_LOCAL_FUNC_S5(hx::LocalFunc,_hx_Closure_0,::Array< bool >,err, ::haxe::Http,_gthis, ::haxe::io::BytesOutput,output, ::haxe::Http,me1, ::Dynamic,old) HXARGC(1)
            		void _hx_run(::String e){
            			HX_GC_STACKFRAME(&_hx_pos_fedd768dee4a1715_390_request)
HXLINE( 394)			me1->responseData = output->getBytes()->toString();
HXLINE( 396)			err[(int)0] = true;
HXLINE( 398)			_gthis->onError = old;
HXLINE( 399)			_gthis->onError(e);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_fedd768dee4a1715_189_request)
HXDLIN( 189)		 ::haxe::Http _gthis = hx::ObjectPtr<OBJ_>(this);
HXLINE( 190)		 ::haxe::Http me = hx::ObjectPtr<OBJ_>(this);
HXLINE( 386)		 ::haxe::Http me1 = hx::ObjectPtr<OBJ_>(this);
HXLINE( 387)		 ::haxe::io::BytesOutput output =  ::haxe::io::BytesOutput_obj::__alloc( HX_CTX );
HXLINE( 388)		 ::Dynamic old = this->onError;
HXLINE( 389)		::Array< bool > err = ::Array_obj< bool >::fromData( _hx_array_data_eaa978f0_3,1);
HXLINE( 390)		this->onError =  ::Dynamic(new _hx_Closure_0(err,_gthis,output,me1,old));
HXLINE( 401)		this->customRequest(post,output,null(),null());
HXLINE( 402)		if (!(err->__get((int)0))) {
HXLINE( 406)			 ::Dynamic me2 = me1->onData;
HXDLIN( 406)			me2((me1->responseData = output->getBytes()->toString()));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Http_obj,request,(void))

void Http_obj::customRequest(bool post, ::haxe::io::Output api, ::sys::net::Socket sock,::String method){
            	HX_GC_STACKFRAME(&_hx_pos_fedd768dee4a1715_425_customRequest)
HXLINE( 426)		this->responseData = null();
HXLINE( 427)		 ::EReg url_regexp =  ::EReg_obj::__alloc( HX_CTX ,HX_("^(https?://)?([a-zA-Z\\.0-9_-]+)(:[0-9]+)?(.*)$",00,3e,3a,6c),HX_("",00,00,00,00));
HXLINE( 428)		if (!(url_regexp->match(this->url))) {
HXLINE( 429)			this->onError(HX_("Invalid URL",86,55,d0,76));
HXLINE( 430)			return;
            		}
HXLINE( 432)		bool secure = (url_regexp->matched((int)1) == HX_("https://",cf,b4,ae,3e));
HXLINE( 433)		if (hx::IsNull( sock )) {
HXLINE( 434)			if (secure) {
HXLINE( 440)				sock =  ::sys::ssl::Socket_obj::__alloc( HX_CTX );
            			}
            			else {
HXLINE( 445)				sock =  ::sys::net::Socket_obj::__alloc( HX_CTX );
            			}
            		}
HXLINE( 447)		::String host = url_regexp->matched((int)2);
HXLINE( 448)		::String portString = url_regexp->matched((int)3);
HXLINE( 449)		::String request = url_regexp->matched((int)4);
HXLINE( 450)		if ((request == HX_("",00,00,00,00))) {
HXLINE( 451)			request = HX_("/",2f,00,00,00);
            		}
HXLINE( 452)		 ::Dynamic port;
HXDLIN( 452)		bool port1;
HXDLIN( 452)		if (hx::IsNotNull( portString )) {
HXLINE( 452)			port1 = (portString == HX_("",00,00,00,00));
            		}
            		else {
HXLINE( 452)			port1 = true;
            		}
HXDLIN( 452)		if (port1) {
HXLINE( 452)			if (secure) {
HXLINE( 452)				port = (int)443;
            			}
            			else {
HXLINE( 452)				port = (int)80;
            			}
            		}
            		else {
HXLINE( 452)			port = ::Std_obj::parseInt(portString.substr((int)1,(portString.length - (int)1)));
            		}
HXLINE( 453)		 ::Dynamic data;
HXLINE( 455)		bool multipart = hx::IsNotNull( this->file );
HXLINE( 456)		::String boundary = null();
HXLINE( 457)		::String uri = null();
HXLINE( 458)		if (multipart) {
HXLINE( 459)			post = true;
HXLINE( 460)			::String boundary1 = ::Std_obj::string(::Std_obj::random((int)1000));
HXDLIN( 460)			::String boundary2 = (boundary1 + ::Std_obj::string(::Std_obj::random((int)1000)));
HXDLIN( 460)			::String boundary3 = (boundary2 + ::Std_obj::string(::Std_obj::random((int)1000)));
HXDLIN( 460)			boundary = (boundary3 + ::Std_obj::string(::Std_obj::random((int)1000)));
HXLINE( 461)			while((boundary.length < (int)38)){
HXLINE( 462)				boundary = (HX_("-",2d,00,00,00) + boundary);
            			}
HXLINE( 463)			 ::StringBuf b =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 464)			{
HXLINE( 464)				 ::_List::ListNode _g_head = this->params->h;
HXDLIN( 464)				while(hx::IsNotNull( _g_head )){
HXLINE( 464)					 ::Dynamic val = _g_head->item;
HXDLIN( 464)					_g_head = _g_head->next;
HXDLIN( 464)					 ::Dynamic p = val;
HXLINE( 465)					{
HXLINE( 465)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 465)							b->flush();
            						}
HXDLIN( 465)						if (hx::IsNull( b->b )) {
HXLINE( 465)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_10,1);
            						}
            						else {
HXLINE( 465)							b->b->push(HX_("--",60,27,00,00));
            						}
            					}
HXLINE( 466)					{
HXLINE( 466)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 466)							b->flush();
            						}
HXDLIN( 466)						if (hx::IsNull( b->b )) {
HXLINE( 466)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(boundary));
            						}
            						else {
HXLINE( 466)							::Array< ::String > b1 = b->b;
HXDLIN( 466)							b1->push(::Std_obj::string(boundary));
            						}
            					}
HXLINE( 467)					{
HXLINE( 467)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 467)							b->flush();
            						}
HXDLIN( 467)						if (hx::IsNull( b->b )) {
HXLINE( 467)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_11,1);
            						}
            						else {
HXLINE( 467)							b->b->push(HX_("\r\n",5d,0b,00,00));
            						}
            					}
HXLINE( 468)					{
HXLINE( 468)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 468)							b->flush();
            						}
HXDLIN( 468)						if (hx::IsNull( b->b )) {
HXLINE( 468)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_12,1);
            						}
            						else {
HXLINE( 468)							b->b->push(HX_("Content-Disposition: form-data; name=\"",bf,46,3a,1c));
            						}
            					}
HXLINE( 469)					{
HXLINE( 469)						::String x = ( (::String)(p->__Field(HX_("param",8d,80,55,bd),hx::paccDynamic)) );
HXDLIN( 469)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 469)							b->flush();
            						}
HXDLIN( 469)						if (hx::IsNull( b->b )) {
HXLINE( 469)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            						}
            						else {
HXLINE( 469)							::Array< ::String > b2 = b->b;
HXDLIN( 469)							b2->push(::Std_obj::string(x));
            						}
            					}
HXLINE( 470)					{
HXLINE( 470)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 470)							b->flush();
            						}
HXDLIN( 470)						if (hx::IsNull( b->b )) {
HXLINE( 470)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_13,1);
            						}
            						else {
HXLINE( 470)							b->b->push(HX_("\"",22,00,00,00));
            						}
            					}
HXLINE( 471)					{
HXLINE( 471)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 471)							b->flush();
            						}
HXDLIN( 471)						if (hx::IsNull( b->b )) {
HXLINE( 471)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_14,1);
            						}
            						else {
HXLINE( 471)							b->b->push(HX_("\r\n",5d,0b,00,00));
            						}
            					}
HXLINE( 472)					{
HXLINE( 472)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 472)							b->flush();
            						}
HXDLIN( 472)						if (hx::IsNull( b->b )) {
HXLINE( 472)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_15,1);
            						}
            						else {
HXLINE( 472)							b->b->push(HX_("\r\n",5d,0b,00,00));
            						}
            					}
HXLINE( 473)					{
HXLINE( 473)						::String x1 = ( (::String)(p->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) );
HXDLIN( 473)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 473)							b->flush();
            						}
HXDLIN( 473)						if (hx::IsNull( b->b )) {
HXLINE( 473)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x1));
            						}
            						else {
HXLINE( 473)							::Array< ::String > b3 = b->b;
HXDLIN( 473)							b3->push(::Std_obj::string(x1));
            						}
            					}
HXLINE( 474)					{
HXLINE( 474)						if (hx::IsNotNull( b->charBuf )) {
HXLINE( 474)							b->flush();
            						}
HXDLIN( 474)						if (hx::IsNull( b->b )) {
HXLINE( 474)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_16,1);
            						}
            						else {
HXLINE( 474)							b->b->push(HX_("\r\n",5d,0b,00,00));
            						}
            					}
            				}
            			}
HXLINE( 476)			{
HXLINE( 476)				if (hx::IsNotNull( b->charBuf )) {
HXLINE( 476)					b->flush();
            				}
HXDLIN( 476)				if (hx::IsNull( b->b )) {
HXLINE( 476)					b->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_17,1);
            				}
            				else {
HXLINE( 476)					b->b->push(HX_("--",60,27,00,00));
            				}
            			}
HXLINE( 477)			{
HXLINE( 477)				if (hx::IsNotNull( b->charBuf )) {
HXLINE( 477)					b->flush();
            				}
HXDLIN( 477)				if (hx::IsNull( b->b )) {
HXLINE( 477)					b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(boundary));
            				}
            				else {
HXLINE( 477)					::Array< ::String > b4 = b->b;
HXDLIN( 477)					b4->push(::Std_obj::string(boundary));
            				}
            			}
HXLINE( 478)			{
HXLINE( 478)				if (hx::IsNotNull( b->charBuf )) {
HXLINE( 478)					b->flush();
            				}
HXDLIN( 478)				if (hx::IsNull( b->b )) {
HXLINE( 478)					b->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_18,1);
            				}
            				else {
HXLINE( 478)					b->b->push(HX_("\r\n",5d,0b,00,00));
            				}
            			}
HXLINE( 479)			{
HXLINE( 479)				if (hx::IsNotNull( b->charBuf )) {
HXLINE( 479)					b->flush();
            				}
HXDLIN( 479)				if (hx::IsNull( b->b )) {
HXLINE( 479)					b->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_19,1);
            				}
            				else {
HXLINE( 479)					b->b->push(HX_("Content-Disposition: form-data; name=\"",bf,46,3a,1c));
            				}
            			}
HXLINE( 480)			{
HXLINE( 480)				::String x2 = ( (::String)(this->file->__Field(HX_("param",8d,80,55,bd),hx::paccDynamic)) );
HXDLIN( 480)				if (hx::IsNotNull( b->charBuf )) {
HXLINE( 480)					b->flush();
            				}
HXDLIN( 480)				if (hx::IsNull( b->b )) {
HXLINE( 480)					b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x2));
            				}
            				else {
HXLINE( 480)					::Array< ::String > b5 = b->b;
HXDLIN( 480)					b5->push(::Std_obj::string(x2));
            				}
            			}
HXLINE( 481)			{
HXLINE( 481)				if (hx::IsNotNull( b->charBuf )) {
HXLINE( 481)					b->flush();
            				}
HXDLIN( 481)				if (hx::IsNull( b->b )) {
HXLINE( 481)					b->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_20,1);
            				}
            				else {
HXLINE( 481)					b->b->push(HX_("\"; filename=\"",b3,3a,e5,4f));
            				}
            			}
HXLINE( 482)			{
HXLINE( 482)				::String x3 = ( (::String)(this->file->__Field(HX_("filename",c7,2e,6a,77),hx::paccDynamic)) );
HXDLIN( 482)				if (hx::IsNotNull( b->charBuf )) {
HXLINE( 482)					b->flush();
            				}
HXDLIN( 482)				if (hx::IsNull( b->b )) {
HXLINE( 482)					b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x3));
            				}
            				else {
HXLINE( 482)					::Array< ::String > b6 = b->b;
HXDLIN( 482)					b6->push(::Std_obj::string(x3));
            				}
            			}
HXLINE( 483)			{
HXLINE( 483)				if (hx::IsNotNull( b->charBuf )) {
HXLINE( 483)					b->flush();
            				}
HXDLIN( 483)				if (hx::IsNull( b->b )) {
HXLINE( 483)					b->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_21,1);
            				}
            				else {
HXLINE( 483)					b->b->push(HX_("\"",22,00,00,00));
            				}
            			}
HXLINE( 484)			{
HXLINE( 484)				if (hx::IsNotNull( b->charBuf )) {
HXLINE( 484)					b->flush();
            				}
HXDLIN( 484)				if (hx::IsNull( b->b )) {
HXLINE( 484)					b->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_22,1);
            				}
            				else {
HXLINE( 484)					b->b->push(HX_("\r\n",5d,0b,00,00));
            				}
            			}
HXLINE( 485)			{
HXLINE( 485)				::String x4 = (((HX_("Content-Type: ",f4,2b,e6,1d) + ( (::String)(this->file->__Field(HX_("mimeType",8e,56,09,5d),hx::paccDynamic)) )) + HX_("\r\n",5d,0b,00,00)) + HX_("\r\n",5d,0b,00,00));
HXDLIN( 485)				if (hx::IsNotNull( b->charBuf )) {
HXLINE( 485)					b->flush();
            				}
HXDLIN( 485)				if (hx::IsNull( b->b )) {
HXLINE( 485)					b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x4));
            				}
            				else {
HXLINE( 485)					::Array< ::String > b7 = b->b;
HXDLIN( 485)					b7->push(::Std_obj::string(x4));
            				}
            			}
HXLINE( 486)			uri = b->toString();
            		}
            		else {
HXLINE( 488)			 ::_List::ListNode _g_head1 = this->params->h;
HXDLIN( 488)			while(hx::IsNotNull( _g_head1 )){
HXLINE( 488)				 ::Dynamic val1 = _g_head1->item;
HXDLIN( 488)				_g_head1 = _g_head1->next;
HXDLIN( 488)				 ::Dynamic p1 = val1;
HXLINE( 489)				if (hx::IsNull( uri )) {
HXLINE( 490)					uri = HX_("",00,00,00,00);
            				}
            				else {
HXLINE( 492)					uri = (uri + HX_("&",26,00,00,00));
            				}
HXLINE( 493)				::String uri1 = (::StringTools_obj::urlEncode(( (::String)(p1->__Field(HX_("param",8d,80,55,bd),hx::paccDynamic)) )) + HX_("=",3d,00,00,00));
HXDLIN( 493)				uri = (uri + (uri1 + ::StringTools_obj::urlEncode(( (::String)(p1->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) ))));
            			}
            		}
HXLINE( 497)		 ::StringBuf b8 =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 498)		if (hx::IsNotNull( method )) {
HXLINE( 499)			{
HXLINE( 499)				if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 499)					b8->flush();
            				}
HXDLIN( 499)				if (hx::IsNull( b8->b )) {
HXLINE( 499)					b8->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(method));
            				}
            				else {
HXLINE( 499)					::Array< ::String > b9 = b8->b;
HXDLIN( 499)					b9->push(::Std_obj::string(method));
            				}
            			}
HXLINE( 500)			{
HXLINE( 500)				if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 500)					b8->flush();
            				}
HXDLIN( 500)				if (hx::IsNull( b8->b )) {
HXLINE( 500)					b8->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_23,1);
            				}
            				else {
HXLINE( 500)					b8->b->push(HX_(" ",20,00,00,00));
            				}
            			}
            		}
            		else {
HXLINE( 501)			if (post) {
HXLINE( 502)				if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 502)					b8->flush();
            				}
HXDLIN( 502)				if (hx::IsNull( b8->b )) {
HXLINE( 502)					b8->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_24,1);
            				}
            				else {
HXLINE( 502)					b8->b->push(HX_("POST ",c0,87,85,44));
            				}
            			}
            			else {
HXLINE( 504)				if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 504)					b8->flush();
            				}
HXDLIN( 504)				if (hx::IsNull( b8->b )) {
HXLINE( 504)					b8->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_25,1);
            				}
            				else {
HXLINE( 504)					b8->b->push(HX_("GET ",ea,ca,22,2f));
            				}
            			}
            		}
HXLINE( 506)		if (hx::IsNotNull( ::haxe::Http_obj::PROXY )) {
HXLINE( 507)			{
HXLINE( 507)				if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 507)					b8->flush();
            				}
HXDLIN( 507)				if (hx::IsNull( b8->b )) {
HXLINE( 507)					b8->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_26,1);
            				}
            				else {
HXLINE( 507)					b8->b->push(HX_("http://",52,75,cd,5a));
            				}
            			}
HXLINE( 508)			{
HXLINE( 508)				if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 508)					b8->flush();
            				}
HXDLIN( 508)				if (hx::IsNull( b8->b )) {
HXLINE( 508)					b8->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(host));
            				}
            				else {
HXLINE( 508)					::Array< ::String > b10 = b8->b;
HXDLIN( 508)					b10->push(::Std_obj::string(host));
            				}
            			}
HXLINE( 509)			if (hx::IsNotEq( port,(int)80 )) {
HXLINE( 510)				{
HXLINE( 510)					if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 510)						b8->flush();
            					}
HXDLIN( 510)					if (hx::IsNull( b8->b )) {
HXLINE( 510)						b8->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_27,1);
            					}
            					else {
HXLINE( 510)						b8->b->push(HX_(":",3a,00,00,00));
            					}
            				}
HXLINE( 511)				{
HXLINE( 511)					if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 511)						b8->flush();
            					}
HXDLIN( 511)					if (hx::IsNull( b8->b )) {
HXLINE( 511)						b8->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(port));
            					}
            					else {
HXLINE( 511)						::Array< ::String > b11 = b8->b;
HXDLIN( 511)						b11->push(::Std_obj::string(port));
            					}
            				}
            			}
            		}
HXLINE( 514)		{
HXLINE( 514)			if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 514)				b8->flush();
            			}
HXDLIN( 514)			if (hx::IsNull( b8->b )) {
HXLINE( 514)				b8->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(request));
            			}
            			else {
HXLINE( 514)				::Array< ::String > b12 = b8->b;
HXDLIN( 514)				b12->push(::Std_obj::string(request));
            			}
            		}
HXLINE( 516)		bool _hx_tmp;
HXDLIN( 516)		if (!(post)) {
HXLINE( 516)			_hx_tmp = hx::IsNotNull( uri );
            		}
            		else {
HXLINE( 516)			_hx_tmp = false;
            		}
HXDLIN( 516)		if (_hx_tmp) {
HXLINE( 517)			if ((request.indexOf(HX_("?",3f,00,00,00),(int)0) >= (int)0)) {
HXLINE( 518)				if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 518)					b8->flush();
            				}
HXDLIN( 518)				if (hx::IsNull( b8->b )) {
HXLINE( 518)					b8->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_28,1);
            				}
            				else {
HXLINE( 518)					b8->b->push(HX_("&",26,00,00,00));
            				}
            			}
            			else {
HXLINE( 520)				if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 520)					b8->flush();
            				}
HXDLIN( 520)				if (hx::IsNull( b8->b )) {
HXLINE( 520)					b8->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_29,1);
            				}
            				else {
HXLINE( 520)					b8->b->push(HX_("?",3f,00,00,00));
            				}
            			}
HXLINE( 521)			{
HXLINE( 521)				if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 521)					b8->flush();
            				}
HXDLIN( 521)				if (hx::IsNull( b8->b )) {
HXLINE( 521)					b8->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(uri));
            				}
            				else {
HXLINE( 521)					::Array< ::String > b13 = b8->b;
HXDLIN( 521)					b13->push(::Std_obj::string(uri));
            				}
            			}
            		}
HXLINE( 523)		{
HXLINE( 523)			::String x5 = ((HX_(" HTTP/1.1\r\nHost: ",d8,a9,d9,24) + host) + HX_("\r\n",5d,0b,00,00));
HXDLIN( 523)			if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 523)				b8->flush();
            			}
HXDLIN( 523)			if (hx::IsNull( b8->b )) {
HXLINE( 523)				b8->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x5));
            			}
            			else {
HXLINE( 523)				::Array< ::String > b14 = b8->b;
HXDLIN( 523)				b14->push(::Std_obj::string(x5));
            			}
            		}
HXLINE( 524)		if (hx::IsNotNull( this->postData )) {
HXLINE( 525)			::String x6 = ((HX_("Content-Length: ",20,de,22,7c) + this->postData.length) + HX_("\r\n",5d,0b,00,00));
HXDLIN( 525)			if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 525)				b8->flush();
            			}
HXDLIN( 525)			if (hx::IsNull( b8->b )) {
HXLINE( 525)				b8->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x6));
            			}
            			else {
HXLINE( 525)				::Array< ::String > b15 = b8->b;
HXDLIN( 525)				b15->push(::Std_obj::string(x6));
            			}
            		}
            		else {
HXLINE( 526)			bool _hx_tmp1;
HXDLIN( 526)			if (post) {
HXLINE( 526)				_hx_tmp1 = hx::IsNotNull( uri );
            			}
            			else {
HXLINE( 526)				_hx_tmp1 = false;
            			}
HXDLIN( 526)			if (_hx_tmp1) {
HXLINE( 527)				bool _hx_tmp2;
HXDLIN( 527)				if (!(multipart)) {
            					HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            					bool _hx_run( ::Dynamic h){
            						HX_GC_STACKFRAME(&_hx_pos_fedd768dee4a1715_527_customRequest)
HXLINE( 527)						return (( (::String)(h->__Field(HX_("header",8d,09,00,fd),hx::paccDynamic)) ) == HX_("Content-Type",ce,69,5d,3c));
            					}
            					HX_END_LOCAL_FUNC1(return)

HXLINE( 527)					_hx_tmp2 = !(::Lambda_obj::exists(this->headers, ::Dynamic(new _hx_Closure_0())));
            				}
            				else {
HXLINE( 527)					_hx_tmp2 = true;
            				}
HXDLIN( 527)				if (_hx_tmp2) {
HXLINE( 528)					{
HXLINE( 528)						if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 528)							b8->flush();
            						}
HXDLIN( 528)						if (hx::IsNull( b8->b )) {
HXLINE( 528)							b8->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_31,1);
            						}
            						else {
HXLINE( 528)							b8->b->push(HX_("Content-Type: ",f4,2b,e6,1d));
            						}
            					}
HXLINE( 529)					if (multipart) {
HXLINE( 530)						{
HXLINE( 530)							if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 530)								b8->flush();
            							}
HXDLIN( 530)							if (hx::IsNull( b8->b )) {
HXLINE( 530)								b8->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_32,1);
            							}
            							else {
HXLINE( 530)								b8->b->push(HX_("multipart/form-data",f0,f8,88,db));
            							}
            						}
HXLINE( 531)						{
HXLINE( 531)							if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 531)								b8->flush();
            							}
HXDLIN( 531)							if (hx::IsNull( b8->b )) {
HXLINE( 531)								b8->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_33,1);
            							}
            							else {
HXLINE( 531)								b8->b->push(HX_("; boundary=",ee,f7,f2,1a));
            							}
            						}
HXLINE( 532)						{
HXLINE( 532)							if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 532)								b8->flush();
            							}
HXDLIN( 532)							if (hx::IsNull( b8->b )) {
HXLINE( 532)								b8->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(boundary));
            							}
            							else {
HXLINE( 532)								::Array< ::String > b16 = b8->b;
HXDLIN( 532)								b16->push(::Std_obj::string(boundary));
            							}
            						}
            					}
            					else {
HXLINE( 534)						if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 534)							b8->flush();
            						}
HXDLIN( 534)						if (hx::IsNull( b8->b )) {
HXLINE( 534)							b8->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_34,1);
            						}
            						else {
HXLINE( 534)							b8->b->push(HX_("application/x-www-form-urlencoded",9e,61,91,fa));
            						}
            					}
HXLINE( 535)					{
HXLINE( 535)						if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 535)							b8->flush();
            						}
HXDLIN( 535)						if (hx::IsNull( b8->b )) {
HXLINE( 535)							b8->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_35,1);
            						}
            						else {
HXLINE( 535)							b8->b->push(HX_("\r\n",5d,0b,00,00));
            						}
            					}
            				}
HXLINE( 537)				if (multipart) {
HXLINE( 538)					::String x7 = ((HX_("Content-Length: ",20,de,22,7c) + (((uri.length + ( (int)(this->file->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic)) )) + boundary.length) + (int)6)) + HX_("\r\n",5d,0b,00,00));
HXDLIN( 538)					if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 538)						b8->flush();
            					}
HXDLIN( 538)					if (hx::IsNull( b8->b )) {
HXLINE( 538)						b8->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x7));
            					}
            					else {
HXLINE( 538)						::Array< ::String > b17 = b8->b;
HXDLIN( 538)						b17->push(::Std_obj::string(x7));
            					}
            				}
            				else {
HXLINE( 540)					::String x8 = ((HX_("Content-Length: ",20,de,22,7c) + uri.length) + HX_("\r\n",5d,0b,00,00));
HXDLIN( 540)					if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 540)						b8->flush();
            					}
HXDLIN( 540)					if (hx::IsNull( b8->b )) {
HXLINE( 540)						b8->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x8));
            					}
            					else {
HXLINE( 540)						::Array< ::String > b18 = b8->b;
HXDLIN( 540)						b18->push(::Std_obj::string(x8));
            					}
            				}
            			}
            		}
HXLINE( 542)		{
HXLINE( 542)			if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 542)				b8->flush();
            			}
HXDLIN( 542)			if (hx::IsNull( b8->b )) {
HXLINE( 542)				b8->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_36,1);
            			}
            			else {
HXLINE( 542)				b8->b->push(HX_("Connection: close\r\n",31,73,d3,b4));
            			}
            		}
HXLINE( 543)		{
HXLINE( 543)			 ::_List::ListNode _g_head2 = this->headers->h;
HXDLIN( 543)			while(hx::IsNotNull( _g_head2 )){
HXLINE( 543)				 ::Dynamic val2 = _g_head2->item;
HXDLIN( 543)				_g_head2 = _g_head2->next;
HXDLIN( 543)				 ::Dynamic h1 = val2;
HXLINE( 544)				{
HXLINE( 544)					::String x9 = ( (::String)(h1->__Field(HX_("header",8d,09,00,fd),hx::paccDynamic)) );
HXDLIN( 544)					if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 544)						b8->flush();
            					}
HXDLIN( 544)					if (hx::IsNull( b8->b )) {
HXLINE( 544)						b8->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x9));
            					}
            					else {
HXLINE( 544)						::Array< ::String > b19 = b8->b;
HXDLIN( 544)						b19->push(::Std_obj::string(x9));
            					}
            				}
HXLINE( 545)				{
HXLINE( 545)					if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 545)						b8->flush();
            					}
HXDLIN( 545)					if (hx::IsNull( b8->b )) {
HXLINE( 545)						b8->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_37,1);
            					}
            					else {
HXLINE( 545)						b8->b->push(HX_(": ",a6,32,00,00));
            					}
            				}
HXLINE( 546)				{
HXLINE( 546)					::String x10 = ( (::String)(h1->__Field(HX_("value",71,7f,b8,31),hx::paccDynamic)) );
HXDLIN( 546)					if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 546)						b8->flush();
            					}
HXDLIN( 546)					if (hx::IsNull( b8->b )) {
HXLINE( 546)						b8->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x10));
            					}
            					else {
HXLINE( 546)						::Array< ::String > b20 = b8->b;
HXDLIN( 546)						b20->push(::Std_obj::string(x10));
            					}
            				}
HXLINE( 547)				{
HXLINE( 547)					if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 547)						b8->flush();
            					}
HXDLIN( 547)					if (hx::IsNull( b8->b )) {
HXLINE( 547)						b8->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_38,1);
            					}
            					else {
HXLINE( 547)						b8->b->push(HX_("\r\n",5d,0b,00,00));
            					}
            				}
            			}
            		}
HXLINE( 549)		{
HXLINE( 549)			if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 549)				b8->flush();
            			}
HXDLIN( 549)			if (hx::IsNull( b8->b )) {
HXLINE( 549)				b8->b = ::Array_obj< ::String >::fromData( _hx_array_data_eaa978f0_39,1);
            			}
            			else {
HXLINE( 549)				b8->b->push(HX_("\r\n",5d,0b,00,00));
            			}
            		}
HXLINE( 550)		if (hx::IsNotNull( this->postData )) {
HXLINE( 551)			::String x11 = this->postData;
HXDLIN( 551)			if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 551)				b8->flush();
            			}
HXDLIN( 551)			if (hx::IsNull( b8->b )) {
HXLINE( 551)				b8->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x11));
            			}
            			else {
HXLINE( 551)				::Array< ::String > b21 = b8->b;
HXDLIN( 551)				b21->push(::Std_obj::string(x11));
            			}
            		}
            		else {
HXLINE( 552)			bool _hx_tmp3;
HXDLIN( 552)			if (post) {
HXLINE( 552)				_hx_tmp3 = hx::IsNotNull( uri );
            			}
            			else {
HXLINE( 552)				_hx_tmp3 = false;
            			}
HXDLIN( 552)			if (_hx_tmp3) {
HXLINE( 553)				if (hx::IsNotNull( b8->charBuf )) {
HXLINE( 553)					b8->flush();
            				}
HXDLIN( 553)				if (hx::IsNull( b8->b )) {
HXLINE( 553)					b8->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(uri));
            				}
            				else {
HXLINE( 553)					::Array< ::String > b22 = b8->b;
HXDLIN( 553)					b22->push(::Std_obj::string(uri));
            				}
            			}
            		}
HXLINE( 554)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 555)			if (hx::IsNotNull( ::haxe::Http_obj::PROXY )) {
HXLINE( 556)				sock->connect( ::sys::net::Host_obj::__alloc( HX_CTX , ::Dynamic(::haxe::Http_obj::PROXY->__Field(HX_("host",68,cf,12,45),hx::paccDynamic))),( (int)(::haxe::Http_obj::PROXY->__Field(HX_("port",81,83,5c,4a),hx::paccDynamic)) ));
            			}
            			else {
HXLINE( 558)				sock->connect( ::sys::net::Host_obj::__alloc( HX_CTX ,host),port);
            			}
HXLINE( 559)			sock->write(b8->toString());
HXLINE( 560)			if (multipart) {
HXLINE( 561)				int bufsize = (int)4096;
HXLINE( 562)				 ::haxe::io::Bytes buf = ::haxe::io::Bytes_obj::alloc(bufsize);
HXLINE( 563)				while((( (int)(this->file->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic)) ) > (int)0)){
HXLINE( 564)					int size;
HXDLIN( 564)					if ((( (int)(this->file->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic)) ) > bufsize)) {
HXLINE( 564)						size = bufsize;
            					}
            					else {
HXLINE( 564)						size = ( (int)(this->file->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic)) );
            					}
HXLINE( 565)					int len = (int)0;
HXLINE( 566)					try {
            						HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE( 567)						len = ( ( ::haxe::io::Input)(this->file->__Field(HX_("io",e6,5b,00,00),hx::paccDynamic)) )->readBytes(buf,(int)0,size);
            					}
            					catch( ::Dynamic _hx_e){
            						if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::haxe::io::Eof e = _hx_e;
HXLINE( 568)							goto _hx_goto_8;
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
HXLINE( 569)					sock->output->writeFullBytes(buf,(int)0,len);
HXLINE( 570)					 ::Dynamic _hx_tmp4 = this->file;
HXDLIN( 570)					_hx_tmp4->__SetField(HX_("size",c1,a0,53,4c),(( (int)(_hx_tmp4->__Field(HX_("size",c1,a0,53,4c),hx::paccDynamic)) ) - len),hx::paccDynamic);
            				}
            				_hx_goto_8:;
HXLINE( 572)				sock->write(HX_("\r\n",5d,0b,00,00));
HXLINE( 573)				sock->write(HX_("--",60,27,00,00));
HXLINE( 574)				sock->write(boundary);
HXLINE( 575)				sock->write(HX_("--",60,27,00,00));
            			}
HXLINE( 577)			this->readHttpResponse(api,sock);
HXLINE( 578)			sock->close();
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic e1 = _hx_e;
HXLINE( 580)				try {
            					HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 580)					sock->close();
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass<  ::Dynamic >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::Dynamic e2 = _hx_e;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
HXLINE( 581)				 ::Dynamic _hx_tmp5 = this->onError;
HXDLIN( 581)				_hx_tmp5(::Std_obj::string(e1));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC4(Http_obj,customRequest,(void))

void Http_obj::readHttpResponse( ::haxe::io::Output api, ::sys::net::Socket sock){
            	HX_GC_STACKFRAME(&_hx_pos_fedd768dee4a1715_585_readHttpResponse)
HXLINE( 587)		 ::haxe::io::BytesBuffer b =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
HXLINE( 588)		int k = (int)4;
HXLINE( 589)		 ::haxe::io::Bytes s = ::haxe::io::Bytes_obj::alloc((int)4);
HXLINE( 590)		sock->setTimeout(this->cnxTimeout);
HXLINE( 591)		while(true){
HXLINE( 592)			int p = sock->input->readBytes(s,(int)0,k);
HXLINE( 593)			while((p != k)){
HXLINE( 594)				 ::haxe::io::Input sock1 = sock->input;
HXDLIN( 594)				p = (p + sock1->readBytes(s,p,(k - p)));
            			}
HXLINE( 595)			{
HXLINE( 595)				bool _hx_tmp;
HXDLIN( 595)				if ((k >= (int)0)) {
HXLINE( 595)					_hx_tmp = (k > s->length);
            				}
            				else {
HXLINE( 595)					_hx_tmp = true;
            				}
HXDLIN( 595)				if (_hx_tmp) {
HXLINE( 595)					HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            				}
HXDLIN( 595)				::Array< unsigned char > b1 = b->b;
HXDLIN( 595)				::Array< unsigned char > b2 = s->b;
HXDLIN( 595)				{
HXLINE( 595)					int _g1 = (int)0;
HXDLIN( 595)					int _g = k;
HXDLIN( 595)					while((_g1 < _g)){
HXLINE( 595)						_g1 = (_g1 + (int)1);
HXDLIN( 595)						int i = (_g1 - (int)1);
HXDLIN( 595)						::Array< unsigned char > b3 = b->b;
HXDLIN( 595)						b3->push(b2->__get(i));
            					}
            				}
            			}
HXLINE( 596)			switch((int)(k)){
            				case (int)1: {
HXLINE( 598)					int c = s->b->__get((int)0);
HXLINE( 599)					if ((c == (int)10)) {
HXLINE( 600)						goto _hx_goto_40;
            					}
HXLINE( 601)					if ((c == (int)13)) {
HXLINE( 602)						k = (int)3;
            					}
            					else {
HXLINE( 604)						k = (int)4;
            					}
            				}
            				break;
            				case (int)2: {
HXLINE( 606)					int c1 = s->b->__get((int)1);
HXLINE( 607)					if ((c1 == (int)10)) {
HXLINE( 608)						if ((s->b->__get((int)0) == (int)13)) {
HXLINE( 609)							goto _hx_goto_40;
            						}
HXLINE( 610)						k = (int)4;
            					}
            					else {
HXLINE( 611)						if ((c1 == (int)13)) {
HXLINE( 612)							k = (int)3;
            						}
            						else {
HXLINE( 614)							k = (int)4;
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXLINE( 616)					int c2 = s->b->__get((int)2);
HXLINE( 617)					if ((c2 == (int)10)) {
HXLINE( 618)						if ((s->b->__get((int)1) != (int)13)) {
HXLINE( 619)							k = (int)4;
            						}
            						else {
HXLINE( 620)							if ((s->b->__get((int)0) != (int)10)) {
HXLINE( 621)								k = (int)2;
            							}
            							else {
HXLINE( 623)								goto _hx_goto_40;
            							}
            						}
            					}
            					else {
HXLINE( 624)						if ((c2 == (int)13)) {
HXLINE( 625)							bool _hx_tmp1;
HXDLIN( 625)							if ((s->b->__get((int)1) == (int)10)) {
HXLINE( 625)								_hx_tmp1 = (s->b->__get((int)0) != (int)13);
            							}
            							else {
HXLINE( 625)								_hx_tmp1 = true;
            							}
HXDLIN( 625)							if (_hx_tmp1) {
HXLINE( 626)								k = (int)1;
            							}
            							else {
HXLINE( 628)								k = (int)3;
            							}
            						}
            						else {
HXLINE( 630)							k = (int)4;
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXLINE( 632)					int c3 = s->b->__get((int)3);
HXLINE( 633)					if ((c3 == (int)10)) {
HXLINE( 634)						if ((s->b->__get((int)2) != (int)13)) {
HXLINE( 635)							continue;
            						}
            						else {
HXLINE( 636)							bool _hx_tmp2;
HXDLIN( 636)							if ((s->b->__get((int)1) == (int)10)) {
HXLINE( 636)								_hx_tmp2 = (s->b->__get((int)0) != (int)13);
            							}
            							else {
HXLINE( 636)								_hx_tmp2 = true;
            							}
HXDLIN( 636)							if (_hx_tmp2) {
HXLINE( 637)								k = (int)2;
            							}
            							else {
HXLINE( 639)								goto _hx_goto_40;
            							}
            						}
            					}
            					else {
HXLINE( 640)						if ((c3 == (int)13)) {
HXLINE( 641)							bool _hx_tmp3;
HXDLIN( 641)							if ((s->b->__get((int)2) == (int)10)) {
HXLINE( 641)								_hx_tmp3 = (s->b->__get((int)1) != (int)13);
            							}
            							else {
HXLINE( 641)								_hx_tmp3 = true;
            							}
HXDLIN( 641)							if (_hx_tmp3) {
HXLINE( 642)								k = (int)3;
            							}
            							else {
HXLINE( 644)								k = (int)1;
            							}
            						}
            					}
            				}
            				break;
            			}
            		}
            		_hx_goto_40:;
HXLINE( 651)		::Array< ::String > headers = b->getBytes()->toString().split(HX_("\r\n",5d,0b,00,00));
HXLINE( 653)		::String response = ( (::String)(headers->shift()) );
HXLINE( 654)		::Array< ::String > rp = response.split(HX_(" ",20,00,00,00));
HXLINE( 655)		 ::Dynamic status = ::Std_obj::parseInt(rp->__get((int)1));
HXLINE( 656)		bool _hx_tmp4;
HXDLIN( 656)		if (hx::IsNotEq( status,(int)0 )) {
HXLINE( 656)			_hx_tmp4 = hx::IsNull( status );
            		}
            		else {
HXLINE( 656)			_hx_tmp4 = true;
            		}
HXDLIN( 656)		if (_hx_tmp4) {
HXLINE( 657)			HX_STACK_DO_THROW(HX_("Response status error",39,25,42,e1));
            		}
HXLINE( 660)		headers->pop();
HXLINE( 661)		headers->pop();
HXLINE( 662)		this->responseHeaders =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 663)		 ::Dynamic size = null();
HXLINE( 664)		bool chunked = false;
HXLINE( 665)		{
HXLINE( 665)			int _g2 = (int)0;
HXDLIN( 665)			while((_g2 < headers->length)){
HXLINE( 665)				::String hline = headers->__get(_g2);
HXDLIN( 665)				_g2 = (_g2 + (int)1);
HXLINE( 666)				::Array< ::String > a = hline.split(HX_(": ",a6,32,00,00));
HXLINE( 667)				::String hname = ( (::String)(a->shift()) );
HXLINE( 668)				::String hval;
HXDLIN( 668)				if ((a->length == (int)1)) {
HXLINE( 668)					hval = a->__get((int)0);
            				}
            				else {
HXLINE( 668)					hval = a->join(HX_(": ",a6,32,00,00));
            				}
HXLINE( 669)				hval = ::StringTools_obj::ltrim(::StringTools_obj::rtrim(hval));
HXLINE( 670)				this->responseHeaders->set(hname,hval);
HXLINE( 671)				{
HXLINE( 671)					::String _g11 = hname.toLowerCase();
HXDLIN( 671)					::String _hx_switch_0 = _g11;
            					if (  (_hx_switch_0==HX_("content-length",ba,f0,cc,86)) ){
HXLINE( 674)						size = ::Std_obj::parseInt(hval);
HXDLIN( 674)						goto _hx_goto_44;
            					}
            					if (  (_hx_switch_0==HX_("transfer-encoding",75,95,2e,69)) ){
HXLINE( 676)						chunked = (hval.toLowerCase() == HX_("chunked",0c,54,d3,50));
HXDLIN( 676)						goto _hx_goto_44;
            					}
            					_hx_goto_44:;
            				}
            			}
            		}
HXLINE( 680)		this->onStatus(status);
HXLINE( 682)		 ::EReg chunk_re =  ::EReg_obj::__alloc( HX_CTX ,HX_("^([0-9A-Fa-f]+)[ ]*\r\n",df,97,ed,19),HX_("m",6d,00,00,00));
HXLINE( 683)		this->chunk_size = null();
HXLINE( 684)		this->chunk_buf = null();
HXLINE( 686)		int bufsize = (int)1024;
HXLINE( 687)		 ::haxe::io::Bytes buf = ::haxe::io::Bytes_obj::alloc(bufsize);
HXLINE( 688)		if (chunked) {
HXLINE( 689)			try {
            				HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE( 690)				while(true){
HXLINE( 691)					int len = sock->input->readBytes(buf,(int)0,bufsize);
HXLINE( 692)					if (!(this->readChunk(chunk_re,api,buf,len))) {
HXLINE( 693)						goto _hx_goto_45;
            					}
            				}
            				_hx_goto_45:;
            			}
            			catch( ::Dynamic _hx_e){
            				if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            					HX_STACK_BEGIN_CATCH
            					 ::haxe::io::Eof e = _hx_e;
HXLINE( 696)					HX_STACK_DO_THROW(HX_("Transfer aborted",3a,e2,d2,6a));
            				}
            				else {
            					HX_STACK_DO_THROW(_hx_e);
            				}
            			}
            		}
            		else {
HXLINE( 698)			if (hx::IsNull( size )) {
HXLINE( 699)				if (!(this->noShutdown)) {
HXLINE( 700)					sock->shutdown(false,true);
            				}
HXLINE( 701)				try {
            					HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE( 702)					while(true){
HXLINE( 703)						int len1 = sock->input->readBytes(buf,(int)0,bufsize);
HXLINE( 704)						api->writeBytes(buf,(int)0,len1);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::io::Eof e1 = _hx_e;
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            			else {
HXLINE( 709)				api->prepare(size);
HXLINE( 710)				try {
            					HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE( 711)					while(hx::IsGreater( size,(int)0 )){
HXLINE( 712)						int len2;
HXDLIN( 712)						if (hx::IsGreater( size,bufsize )) {
HXLINE( 712)							len2 = bufsize;
            						}
            						else {
HXLINE( 712)							len2 = size;
            						}
HXDLIN( 712)						int len3 = sock->input->readBytes(buf,(int)0,len2);
HXLINE( 713)						api->writeBytes(buf,(int)0,len3);
HXLINE( 714)						size = (size - len3);
            					}
            				}
            				catch( ::Dynamic _hx_e){
            					if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            						HX_STACK_BEGIN_CATCH
            						 ::haxe::io::Eof e2 = _hx_e;
HXLINE( 717)						HX_STACK_DO_THROW(HX_("Transfer aborted",3a,e2,d2,6a));
            					}
            					else {
            						HX_STACK_DO_THROW(_hx_e);
            					}
            				}
            			}
            		}
HXLINE( 720)		bool _hx_tmp5;
HXDLIN( 720)		if (chunked) {
HXLINE( 720)			if (hx::IsNull( this->chunk_size )) {
HXLINE( 720)				_hx_tmp5 = hx::IsNotNull( this->chunk_buf );
            			}
            			else {
HXLINE( 720)				_hx_tmp5 = true;
            			}
            		}
            		else {
HXLINE( 720)			_hx_tmp5 = false;
            		}
HXDLIN( 720)		if (_hx_tmp5) {
HXLINE( 721)			HX_STACK_DO_THROW(HX_("Invalid chunk",64,90,fb,29));
            		}
HXLINE( 722)		bool _hx_tmp6;
HXDLIN( 722)		if (hx::IsGreaterEq( status,(int)200 )) {
HXLINE( 722)			_hx_tmp6 = hx::IsGreaterEq( status,(int)400 );
            		}
            		else {
HXLINE( 722)			_hx_tmp6 = true;
            		}
HXDLIN( 722)		if (_hx_tmp6) {
HXLINE( 723)			HX_STACK_DO_THROW((HX_("Http Error #",33,85,a5,2b) + status));
            		}
HXLINE( 724)		api->close();
            	}


HX_DEFINE_DYNAMIC_FUNC2(Http_obj,readHttpResponse,(void))

bool Http_obj::readChunk( ::EReg chunk_re, ::haxe::io::Output api, ::haxe::io::Bytes buf,int len){
            	HX_GC_STACKFRAME(&_hx_pos_fedd768dee4a1715_727_readChunk)
HXLINE( 728)		if (hx::IsNull( this->chunk_size )) {
HXLINE( 729)			if (hx::IsNotNull( this->chunk_buf )) {
HXLINE( 730)				 ::haxe::io::BytesBuffer b =  ::haxe::io::BytesBuffer_obj::__alloc( HX_CTX );
HXLINE( 731)				{
HXLINE( 731)					 ::haxe::io::Bytes src = this->chunk_buf;
HXDLIN( 731)					::Array< unsigned char > b1 = b->b;
HXDLIN( 731)					::Array< unsigned char > b2 = src->b;
HXDLIN( 731)					{
HXLINE( 731)						int _g1 = (int)0;
HXDLIN( 731)						int _g = src->length;
HXDLIN( 731)						while((_g1 < _g)){
HXLINE( 731)							_g1 = (_g1 + (int)1);
HXDLIN( 731)							int i = (_g1 - (int)1);
HXDLIN( 731)							::Array< unsigned char > b3 = b->b;
HXDLIN( 731)							b3->push(b2->__get(i));
            						}
            					}
            				}
HXLINE( 732)				{
HXLINE( 732)					bool _hx_tmp;
HXDLIN( 732)					if ((len >= (int)0)) {
HXLINE( 732)						_hx_tmp = (len > buf->length);
            					}
            					else {
HXLINE( 732)						_hx_tmp = true;
            					}
HXDLIN( 732)					if (_hx_tmp) {
HXLINE( 732)						HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            					}
HXDLIN( 732)					::Array< unsigned char > b11 = b->b;
HXDLIN( 732)					::Array< unsigned char > b21 = buf->b;
HXDLIN( 732)					{
HXLINE( 732)						int _g11 = (int)0;
HXDLIN( 732)						int _g2 = len;
HXDLIN( 732)						while((_g11 < _g2)){
HXLINE( 732)							_g11 = (_g11 + (int)1);
HXDLIN( 732)							int i1 = (_g11 - (int)1);
HXDLIN( 732)							::Array< unsigned char > b4 = b->b;
HXDLIN( 732)							b4->push(b21->__get(i1));
            						}
            					}
            				}
HXLINE( 733)				buf = b->getBytes();
HXLINE( 734)				len = (len + this->chunk_buf->length);
HXLINE( 735)				this->chunk_buf = null();
            			}
HXLINE( 740)			if (chunk_re->match(buf->toString())) {
HXLINE( 742)				 ::Dynamic p = chunk_re->matchedPos();
HXLINE( 743)				if ((( (int)(p->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic)) ) <= len)) {
HXLINE( 744)					::String cstr = chunk_re->matched((int)1);
HXLINE( 745)					this->chunk_size = ::Std_obj::parseInt((HX_("0x",48,2a,00,00) + cstr));
HXLINE( 746)					if ((cstr == HX_("0",30,00,00,00))) {
HXLINE( 747)						this->chunk_size = null();
HXLINE( 748)						this->chunk_buf = null();
HXLINE( 749)						return false;
            					}
HXLINE( 751)					len = (len - ( (int)(p->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic)) ));
HXLINE( 752)					return this->readChunk(chunk_re,api,buf->sub(( (int)(p->__Field(HX_("len",d5,4b,52,00),hx::paccDynamic)) ),len),len);
            				}
            			}
HXLINE( 756)			if ((len > (int)10)) {
HXLINE( 757)				this->onError(HX_("Invalid chunk",64,90,fb,29));
HXLINE( 758)				return false;
            			}
HXLINE( 760)			this->chunk_buf = buf->sub((int)0,len);
HXLINE( 761)			return true;
            		}
HXLINE( 763)		if (hx::IsGreater( this->chunk_size,len )) {
HXLINE( 764)			 ::haxe::Http _hx_tmp1 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 764)			_hx_tmp1->chunk_size = (_hx_tmp1->chunk_size - len);
HXLINE( 765)			api->writeBytes(buf,(int)0,len);
HXLINE( 766)			return true;
            		}
HXLINE( 768)		int end = (this->chunk_size + (int)2);
HXLINE( 769)		if ((len >= end)) {
HXLINE( 770)			if (hx::IsGreater( this->chunk_size,(int)0 )) {
HXLINE( 771)				api->writeBytes(buf,(int)0,this->chunk_size);
            			}
HXLINE( 772)			len = (len - end);
HXLINE( 773)			this->chunk_size = null();
HXLINE( 774)			if ((len == (int)0)) {
HXLINE( 775)				return true;
            			}
HXLINE( 776)			return this->readChunk(chunk_re,api,buf->sub(end,len),len);
            		}
HXLINE( 778)		if (hx::IsGreater( this->chunk_size,(int)0 )) {
HXLINE( 779)			api->writeBytes(buf,(int)0,this->chunk_size);
            		}
HXLINE( 780)		 ::haxe::Http _hx_tmp2 = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 780)		_hx_tmp2->chunk_size = (_hx_tmp2->chunk_size - len);
HXLINE( 781)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC4(Http_obj,readChunk,return )

HX_BEGIN_DEFAULT_FUNC(__default_onData,Http_obj)
void _hx_run(::String data){
            	HX_STACKFRAME(&_hx_pos_fedd768dee4a1715_793___default_onData)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onError,Http_obj)
void _hx_run(::String msg){
            	HX_STACKFRAME(&_hx_pos_fedd768dee4a1715_803___default_onError)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

HX_BEGIN_DEFAULT_FUNC(__default_onStatus,Http_obj)
void _hx_run(int status){
            	HX_STACKFRAME(&_hx_pos_fedd768dee4a1715_813___default_onStatus)
            	}
HX_END_LOCAL_FUNC1((void))
HX_END_DEFAULT_FUNC

 ::Dynamic Http_obj::PROXY;

::String Http_obj::requestUrl(::String url){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,::Array< ::String >,r) HXARGC(1)
            		void _hx_run(::String d){
            			HX_GC_STACKFRAME(&_hx_pos_fedd768dee4a1715_832_requestUrl)
HXLINE( 832)			r[(int)0] = d;
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run(::String e){
            			HX_GC_STACKFRAME(&_hx_pos_fedd768dee4a1715_835_requestUrl)
HXLINE( 835)			HX_STACK_DO_THROW(e);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_fedd768dee4a1715_825_requestUrl)
HXLINE( 826)		 ::haxe::Http h =  ::haxe::Http_obj::__alloc( HX_CTX ,url);
HXLINE( 830)		::Array< ::String > r = ::Array_obj< ::String >::__new(1)->init(0,null());
HXLINE( 831)		h->onData =  ::Dynamic(new _hx_Closure_0(r));
HXLINE( 834)		h->onError =  ::Dynamic(new _hx_Closure_1());
HXLINE( 837)		h->request(false);
HXLINE( 838)		return r->__get((int)0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Http_obj,requestUrl,return )


void Http_obj::__alloc_dynamic_functions(hx::Ctx *_hx_ctx,Http_obj *_hx_obj) {
	if (!_hx_obj->onStatus.mPtr) _hx_obj->onStatus = new __default_onStatus(_hx_obj);
	if (!_hx_obj->onError.mPtr) _hx_obj->onError = new __default_onError(_hx_obj);
	if (!_hx_obj->onData.mPtr) _hx_obj->onData = new __default_onData(_hx_obj);
}
hx::ObjectPtr< Http_obj > Http_obj::__new(::String url) {
	hx::ObjectPtr< Http_obj > __this = new Http_obj();
	__this->__construct(url);
	return __this;
}

hx::ObjectPtr< Http_obj > Http_obj::__alloc(hx::Ctx *_hx_ctx,::String url) {
	Http_obj *__this = (Http_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Http_obj), true, "haxe.Http"));
	*(void **)__this = Http_obj::_hx_vtable;
	haxe::Http_obj::__alloc_dynamic_functions(_hx_ctx,__this);
	__this->__construct(url);
	return __this;
}

Http_obj::Http_obj()
{
	onStatus = new __default_onStatus(this);
	onError = new __default_onError(this);
	onData = new __default_onData(this);
}

void Http_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Http);
	HX_MARK_MEMBER_NAME(url,"url");
	HX_MARK_MEMBER_NAME(responseData,"responseData");
	HX_MARK_MEMBER_NAME(noShutdown,"noShutdown");
	HX_MARK_MEMBER_NAME(cnxTimeout,"cnxTimeout");
	HX_MARK_MEMBER_NAME(responseHeaders,"responseHeaders");
	HX_MARK_MEMBER_NAME(chunk_size,"chunk_size");
	HX_MARK_MEMBER_NAME(chunk_buf,"chunk_buf");
	HX_MARK_MEMBER_NAME(file,"file");
	HX_MARK_MEMBER_NAME(postData,"postData");
	HX_MARK_MEMBER_NAME(headers,"headers");
	HX_MARK_MEMBER_NAME(params,"params");
	HX_MARK_MEMBER_NAME(onData,"onData");
	HX_MARK_MEMBER_NAME(onError,"onError");
	HX_MARK_MEMBER_NAME(onStatus,"onStatus");
	HX_MARK_END_CLASS();
}

void Http_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(url,"url");
	HX_VISIT_MEMBER_NAME(responseData,"responseData");
	HX_VISIT_MEMBER_NAME(noShutdown,"noShutdown");
	HX_VISIT_MEMBER_NAME(cnxTimeout,"cnxTimeout");
	HX_VISIT_MEMBER_NAME(responseHeaders,"responseHeaders");
	HX_VISIT_MEMBER_NAME(chunk_size,"chunk_size");
	HX_VISIT_MEMBER_NAME(chunk_buf,"chunk_buf");
	HX_VISIT_MEMBER_NAME(file,"file");
	HX_VISIT_MEMBER_NAME(postData,"postData");
	HX_VISIT_MEMBER_NAME(headers,"headers");
	HX_VISIT_MEMBER_NAME(params,"params");
	HX_VISIT_MEMBER_NAME(onData,"onData");
	HX_VISIT_MEMBER_NAME(onError,"onError");
	HX_VISIT_MEMBER_NAME(onStatus,"onStatus");
}

hx::Val Http_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { return hx::Val( url ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"file") ) { return hx::Val( file ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { return hx::Val( params ); }
		if (HX_FIELD_EQ(inName,"onData") ) { return hx::Val( onData ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"headers") ) { return hx::Val( headers ); }
		if (HX_FIELD_EQ(inName,"request") ) { return hx::Val( request_dyn() ); }
		if (HX_FIELD_EQ(inName,"onError") ) { return hx::Val( onError ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"postData") ) { return hx::Val( postData ); }
		if (HX_FIELD_EQ(inName,"onStatus") ) { return hx::Val( onStatus ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"chunk_buf") ) { return hx::Val( chunk_buf ); }
		if (HX_FIELD_EQ(inName,"readChunk") ) { return hx::Val( readChunk_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"noShutdown") ) { return hx::Val( noShutdown ); }
		if (HX_FIELD_EQ(inName,"cnxTimeout") ) { return hx::Val( cnxTimeout ); }
		if (HX_FIELD_EQ(inName,"chunk_size") ) { return hx::Val( chunk_size ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"responseData") ) { return hx::Val( responseData ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"customRequest") ) { return hx::Val( customRequest_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"responseHeaders") ) { return hx::Val( responseHeaders ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"readHttpResponse") ) { return hx::Val( readHttpResponse_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Http_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"PROXY") ) { outValue = ( PROXY ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"requestUrl") ) { outValue = requestUrl_dyn(); return true; }
	}
	return false;
}

hx::Val Http_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"url") ) { url=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"file") ) { file=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"params") ) { params=inValue.Cast<  ::List >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onData") ) { onData=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"headers") ) { headers=inValue.Cast<  ::List >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onError") ) { onError=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"postData") ) { postData=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"onStatus") ) { onStatus=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"chunk_buf") ) { chunk_buf=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"noShutdown") ) { noShutdown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cnxTimeout") ) { cnxTimeout=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chunk_size") ) { chunk_size=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"responseData") ) { responseData=inValue.Cast< ::String >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"responseHeaders") ) { responseHeaders=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Http_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"PROXY") ) { PROXY=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

void Http_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("url","\x6f","\x2b","\x59","\x00"));
	outFields->push(HX_HCSTRING("responseData","\x4b","\x05","\xe9","\xc4"));
	outFields->push(HX_HCSTRING("noShutdown","\xf7","\xc1","\x69","\x5b"));
	outFields->push(HX_HCSTRING("cnxTimeout","\xb4","\x3a","\x75","\x76"));
	outFields->push(HX_HCSTRING("responseHeaders","\xc5","\x0d","\xca","\x43"));
	outFields->push(HX_HCSTRING("chunk_size","\x13","\x8b","\xba","\xd8"));
	outFields->push(HX_HCSTRING("chunk_buf","\x21","\x09","\x61","\xa7"));
	outFields->push(HX_HCSTRING("file","\x7c","\xce","\xbb","\x43"));
	outFields->push(HX_HCSTRING("postData","\xaa","\xb6","\xa2","\x00"));
	outFields->push(HX_HCSTRING("headers","\x46","\x52","\x08","\x63"));
	outFields->push(HX_HCSTRING("params","\x46","\xfb","\x7a","\xed"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Http_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Http_obj,url),HX_HCSTRING("url","\x6f","\x2b","\x59","\x00")},
	{hx::fsString,(int)offsetof(Http_obj,responseData),HX_HCSTRING("responseData","\x4b","\x05","\xe9","\xc4")},
	{hx::fsBool,(int)offsetof(Http_obj,noShutdown),HX_HCSTRING("noShutdown","\xf7","\xc1","\x69","\x5b")},
	{hx::fsFloat,(int)offsetof(Http_obj,cnxTimeout),HX_HCSTRING("cnxTimeout","\xb4","\x3a","\x75","\x76")},
	{hx::fsObject /*::haxe::ds::StringMap*/ ,(int)offsetof(Http_obj,responseHeaders),HX_HCSTRING("responseHeaders","\xc5","\x0d","\xca","\x43")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Http_obj,chunk_size),HX_HCSTRING("chunk_size","\x13","\x8b","\xba","\xd8")},
	{hx::fsObject /*::haxe::io::Bytes*/ ,(int)offsetof(Http_obj,chunk_buf),HX_HCSTRING("chunk_buf","\x21","\x09","\x61","\xa7")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Http_obj,file),HX_HCSTRING("file","\x7c","\xce","\xbb","\x43")},
	{hx::fsString,(int)offsetof(Http_obj,postData),HX_HCSTRING("postData","\xaa","\xb6","\xa2","\x00")},
	{hx::fsObject /*::List*/ ,(int)offsetof(Http_obj,headers),HX_HCSTRING("headers","\x46","\x52","\x08","\x63")},
	{hx::fsObject /*::List*/ ,(int)offsetof(Http_obj,params),HX_HCSTRING("params","\x46","\xfb","\x7a","\xed")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Http_obj,onData),HX_HCSTRING("onData","\xe9","\x5e","\xed","\xe4")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Http_obj,onError),HX_HCSTRING("onError","\x29","\x6a","\x67","\x09")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Http_obj,onStatus),HX_HCSTRING("onStatus","\xb1","\xdd","\xa8","\xe5")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Http_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &Http_obj::PROXY,HX_HCSTRING("PROXY","\x4e","\x26","\x7e","\x46")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Http_obj_sMemberFields[] = {
	HX_HCSTRING("url","\x6f","\x2b","\x59","\x00"),
	HX_HCSTRING("responseData","\x4b","\x05","\xe9","\xc4"),
	HX_HCSTRING("noShutdown","\xf7","\xc1","\x69","\x5b"),
	HX_HCSTRING("cnxTimeout","\xb4","\x3a","\x75","\x76"),
	HX_HCSTRING("responseHeaders","\xc5","\x0d","\xca","\x43"),
	HX_HCSTRING("chunk_size","\x13","\x8b","\xba","\xd8"),
	HX_HCSTRING("chunk_buf","\x21","\x09","\x61","\xa7"),
	HX_HCSTRING("file","\x7c","\xce","\xbb","\x43"),
	HX_HCSTRING("postData","\xaa","\xb6","\xa2","\x00"),
	HX_HCSTRING("headers","\x46","\x52","\x08","\x63"),
	HX_HCSTRING("params","\x46","\xfb","\x7a","\xed"),
	HX_HCSTRING("request","\x4f","\xdf","\x84","\x44"),
	HX_HCSTRING("customRequest","\x9e","\x47","\x93","\xee"),
	HX_HCSTRING("readHttpResponse","\x9f","\x0e","\x50","\x47"),
	HX_HCSTRING("readChunk","\x37","\x13","\xaa","\x16"),
	HX_HCSTRING("onData","\xe9","\x5e","\xed","\xe4"),
	HX_HCSTRING("onError","\x29","\x6a","\x67","\x09"),
	HX_HCSTRING("onStatus","\xb1","\xdd","\xa8","\xe5"),
	::String(null()) };

static void Http_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Http_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Http_obj::PROXY,"PROXY");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Http_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Http_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Http_obj::PROXY,"PROXY");
};

#endif

hx::Class Http_obj::__mClass;

static ::String Http_obj_sStaticFields[] = {
	HX_HCSTRING("PROXY","\x4e","\x26","\x7e","\x46"),
	HX_HCSTRING("requestUrl","\x60","\x3f","\x09","\x01"),
	::String(null())
};

void Http_obj::__register()
{
	hx::Object *dummy = new Http_obj;
	Http_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("haxe.Http","\xf0","\x78","\xa9","\xea");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Http_obj::__GetStatic;
	__mClass->mSetStaticField = &Http_obj::__SetStatic;
	__mClass->mMarkFunc = Http_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Http_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Http_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Http_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Http_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Http_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Http_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Http_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fedd768dee4a1715_65_boot)
HXDLIN(  65)		PROXY = null();
            	}
}

} // end namespace haxe
