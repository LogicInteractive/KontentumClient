// Generated by Haxe 3.4.3
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_cpp_vm_Thread
#include <cpp/vm/Thread.h>
#endif
#ifndef INCLUDED_haxe_Http
#include <haxe/Http.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_haxe_macro_Error
#include <haxe/macro/Error.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_27_main,"Main","main",0xed0e206e,"Main.main","Main.hx",27,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_55_pingThread,"Main","pingThread",0x4f3dc0d1,"Main.pingThread","Main.hx",55,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_65_SystemReboot,"Main","SystemReboot",0xcf459709,"Main.SystemReboot","Main.hx",65,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_74_SystemShutdown,"Main","SystemShutdown",0x8593073a,"Main.SystemShutdown","Main.hx",74,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_90_fromXML,"Main","fromXML",0xbc378978,"Main.fromXML","Main.hx",90,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_101_iterateXMLNode,"Main","iterateXMLNode",0x644d1d14,"Main.iterateXMLNode","Main.hx",101,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_121_returnTyped,"Main","returnTyped",0x26aef605,"Main.returnTyped","Main.hx",121,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_136_isStringBool,"Main","isStringBool",0xec11e35a,"Main.isStringBool","Main.hx",136,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_149_toBool,"Main","toBool",0xa77f0eba,"Main.toBool","Main.hx",149,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_173_isStringInt,"Main","isStringInt",0xa53da3bf,"Main.isStringInt","Main.hx",173,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_187_isfirstCharNumber,"Main","isfirstCharNumber",0x461fac90,"Main.isfirstCharNumber","Main.hx",187,0x087e5c05)

void Main_obj::__construct() { }

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x332f6459;
}

 ::Dynamic Main_obj::settings;

 ::haxe::Timer Main_obj::timer;

 ::cpp::vm::Thread Main_obj::thread;

void Main_obj::main(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_27_main)
HXLINE(  28)		::String configFile = HX_("",00,00,00,00);
HXLINE(  29)		try {
            			HX_STACK_CATCHABLE( ::haxe::macro::Error, 0);
HXLINE(  31)			configFile = ::sys::io::File_obj::getContent(HX_("config.xml",2b,1e,35,61));
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::haxe::macro::Error >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::haxe::macro::Error e = _hx_e;
HXLINE(  35)				::haxe::Log_obj::trace(HX_("Config file not found",4f,f0,ef,41),hx::SourceInfo(HX_("Main.hx",05,5c,7e,08),35,HX_("Main",59,64,2f,33),HX_("main",39,38,56,48)));
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  38)		::Main_obj::settings = ::Main_obj::fromXML(::Xml_obj::parse(configFile));
HXLINE(  50)		::Main_obj::SystemReboot();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))

void Main_obj::pingThread(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_55_pingThread)
HXDLIN(  55)		while(true){
HXLINE(  57)			 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  57)			::String _hx_tmp1 = (::Std_obj::string( ::Dynamic( ::Dynamic( ::Dynamic(::Main_obj::settings->__Field(HX_("config",c2,56,d2,c7),hx::paccDynamic))->__Field(HX_("kontentum",d9,bb,eb,a7),hx::paccDynamic))->__Field(HX_("ip",e7,5b,00,00),hx::paccDynamic))) + HX_("/rest/getExhibit/",20,35,e8,26));
HXDLIN(  57)			::String _hx_tmp2 = ::haxe::Http_obj::requestUrl((_hx_tmp1 + ::Std_obj::string( ::Dynamic( ::Dynamic( ::Dynamic(::Main_obj::settings->__Field(HX_("config",c2,56,d2,c7),hx::paccDynamic))->__Field(HX_("kontentum",d9,bb,eb,a7),hx::paccDynamic))->__Field(HX_("exhibitID",34,93,19,9c),hx::paccDynamic)))));
HXDLIN(  57)			_hx_tmp(_hx_tmp2,hx::SourceInfo(HX_("Main.hx",05,5c,7e,08),57,HX_("Main",59,64,2f,33),HX_("pingThread",dc,42,b6,b7)));
HXLINE(  58)			::Sys_obj::sleep((::Std_obj::parseFloat(( (::String)( ::Dynamic(::Main_obj::settings->__Field(HX_("config",c2,56,d2,c7),hx::paccDynamic))->__Field(HX_("intervalMS",eb,57,81,9b),hx::paccDynamic)) )) * ((Float)0.001)));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,pingThread,(void))

void Main_obj::SystemReboot(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_65_SystemReboot)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,SystemReboot,(void))

void Main_obj::SystemShutdown(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_74_SystemShutdown)
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,SystemShutdown,(void))

 ::Dynamic Main_obj::fromXML( ::Xml xml){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_90_fromXML)
HXLINE(  91)		 ::Dynamic o =  ::Dynamic(hx::Anon_obj::Create(0));
HXLINE(  92)		if (hx::IsNotNull( xml )) {
HXLINE(  94)			::Main_obj::iterateXMLNode(o,xml);
            		}
HXLINE(  96)		return o;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Main_obj,fromXML,return )

void Main_obj::iterateXMLNode( ::Dynamic o, ::Xml xml){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_101_iterateXMLNode)
HXDLIN( 101)		 ::Dynamic node = xml->elements();
HXDLIN( 101)		while(( (bool)(node->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXDLIN( 101)			 ::Xml node1 = ( ( ::Xml)(node->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 103)			if (hx::IsNotNull( node1 )) {
HXLINE( 105)				int nodeChildren = (int)0;
HXLINE( 106)				{
HXLINE( 106)					 ::Dynamic nc = node1->elements();
HXDLIN( 106)					while(( (bool)(nc->__Field(HX_("hasNext",6d,a5,46,18),hx::paccDynamic)()) )){
HXLINE( 106)						 ::Xml nc1 = ( ( ::Xml)(nc->__Field(HX_("next",f3,84,02,49),hx::paccDynamic)()) );
HXLINE( 107)						nodeChildren = (nodeChildren + (int)1);
            					}
            				}
HXLINE( 109)				if ((nodeChildren > (int)0)) {
HXLINE( 111)					if ((node1->nodeType != ::Xml_obj::Element)) {
HXLINE( 111)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + node1->nodeType));
            					}
HXDLIN( 111)					::Reflect_obj::setField(o,node1->nodeName, ::Dynamic(hx::Anon_obj::Create(0)));
HXLINE( 112)					if ((node1->nodeType != ::Xml_obj::Element)) {
HXLINE( 112)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + node1->nodeType));
            					}
HXDLIN( 112)					::Main_obj::iterateXMLNode(::Reflect_obj::field(o,node1->nodeName),node1);
            				}
            				else {
HXLINE( 115)					if ((node1->nodeType != ::Xml_obj::Element)) {
HXLINE( 115)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + node1->nodeType));
            					}
HXDLIN( 115)					::String _hx_tmp = node1->nodeName;
HXDLIN( 115)					bool _hx_tmp1;
HXDLIN( 115)					if ((node1->nodeType != ::Xml_obj::Document)) {
HXLINE( 115)						_hx_tmp1 = (node1->nodeType != ::Xml_obj::Element);
            					}
            					else {
HXLINE( 115)						_hx_tmp1 = false;
            					}
HXDLIN( 115)					if (_hx_tmp1) {
HXLINE( 115)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + node1->nodeType));
            					}
HXDLIN( 115)					::Reflect_obj::setField(o,_hx_tmp,::Main_obj::returnTyped(::Std_obj::string(node1->children->__get((int)0).StaticCast<  ::Xml >())));
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Main_obj,iterateXMLNode,(void))

 ::Dynamic Main_obj::returnTyped(::String d){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_121_returnTyped)
HXLINE( 122)		if (hx::IsNull( d )) {
HXLINE( 123)			return d;
            		}
HXLINE( 125)		if (::Main_obj::isStringBool(d)) {
HXLINE( 126)			return ::Main_obj::toBool(d);
            		}
            		else {
HXLINE( 127)			if (::Main_obj::isStringInt(d)) {
HXLINE( 128)				return ::Std_obj::parseInt(d);
            			}
            			else {
HXLINE( 129)				if (::Main_obj::isStringInt(d)) {
HXLINE( 130)					return ::Std_obj::parseFloat(d);
            				}
            				else {
HXLINE( 132)					return ::Std_obj::string(d);
            				}
            			}
            		}
HXLINE( 125)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Main_obj,returnTyped,return )

bool Main_obj::isStringBool(::String inp){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_136_isStringBool)
HXLINE( 137)		if (hx::IsNull( inp )) {
HXLINE( 138)			return false;
            		}
HXLINE( 140)		inp.split(HX_(" ",20,00,00,00))->join(HX_("",00,00,00,00));
HXLINE( 142)		bool _hx_tmp;
HXDLIN( 142)		if ((inp.toLowerCase() != HX_("true",4e,a7,03,4d))) {
HXLINE( 142)			_hx_tmp = (inp.toLowerCase() == HX_("false",a3,35,4f,fb));
            		}
            		else {
HXLINE( 142)			_hx_tmp = true;
            		}
HXDLIN( 142)		if (_hx_tmp) {
HXLINE( 143)			return true;
            		}
            		else {
HXLINE( 145)			return false;
            		}
HXLINE( 142)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Main_obj,isStringBool,return )

bool Main_obj::toBool( ::Dynamic value){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_149_toBool)
HXLINE( 150)		bool isBoolean = false;
HXLINE( 151)		::String strVal = ::Std_obj::string(value);
HXLINE( 153)		{
HXLINE( 153)			::String _g = strVal.toLowerCase();
HXDLIN( 153)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("1",31,00,00,00)) ){
HXLINE( 156)				isBoolean = true;
HXDLIN( 156)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==HX_("enabled",81,04,31,7e)) ){
HXLINE( 166)				isBoolean = true;
HXDLIN( 166)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==HX_("on",1f,61,00,00)) ){
HXLINE( 164)				isBoolean = true;
HXDLIN( 164)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==HX_("true",4e,a7,03,4d)) ){
HXLINE( 158)				isBoolean = true;
HXDLIN( 158)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==HX_("y",79,00,00,00)) ){
HXLINE( 162)				isBoolean = true;
HXDLIN( 162)				goto _hx_goto_11;
            			}
            			if (  (_hx_switch_0==HX_("yes",27,29,5c,00)) ){
HXLINE( 160)				isBoolean = true;
HXDLIN( 160)				goto _hx_goto_11;
            			}
            			_hx_goto_11:;
            		}
HXLINE( 169)		return isBoolean;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Main_obj,toBool,return )

bool Main_obj::isStringInt(::String inp){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_173_isStringInt)
HXLINE( 174)		bool _hx_tmp;
HXDLIN( 174)		if (hx::IsNotNull( inp )) {
HXLINE( 174)			_hx_tmp = (inp.indexOf(HX_(".",2e,00,00,00),null()) != (int)-1);
            		}
            		else {
HXLINE( 174)			_hx_tmp = true;
            		}
HXDLIN( 174)		if (_hx_tmp) {
HXLINE( 175)			return false;
            		}
HXLINE( 177)		inp.split(HX_(" ",20,00,00,00))->join(HX_("",00,00,00,00));
HXLINE( 178)		{
HXLINE( 178)			int _g1 = (int)0;
HXDLIN( 178)			int _g = inp.length;
HXDLIN( 178)			while((_g1 < _g)){
HXLINE( 178)				_g1 = (_g1 + (int)1);
HXDLIN( 178)				int i = (_g1 - (int)1);
HXLINE( 180)				if (!(::Main_obj::isfirstCharNumber(inp.substr(i,(int)1)))) {
HXLINE( 181)					return false;
            				}
            			}
            		}
HXLINE( 183)		return true;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Main_obj,isStringInt,return )

bool Main_obj::isfirstCharNumber(::String _hx_char){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_187_isfirstCharNumber)
HXLINE( 188)		bool _hx_tmp;
HXDLIN( 188)		if (hx::IsNotNull( _hx_char )) {
HXLINE( 188)			_hx_tmp = (_hx_char.length < (int)1);
            		}
            		else {
HXLINE( 188)			_hx_tmp = true;
            		}
HXDLIN( 188)		if (_hx_tmp) {
HXLINE( 189)			return false;
            		}
HXLINE( 191)		bool isNumber = false;
HXLINE( 192)		::String fc = _hx_char.substr((int)0,(int)1);
HXLINE( 193)		::String _hx_switch_0 = fc;
            		if (  (_hx_switch_0==HX_("0",30,00,00,00)) ){
HXLINE( 196)			isNumber = true;
HXDLIN( 196)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_0==HX_("1",31,00,00,00)) ){
HXLINE( 198)			isNumber = true;
HXDLIN( 198)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_0==HX_("2",32,00,00,00)) ){
HXLINE( 200)			isNumber = true;
HXDLIN( 200)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_0==HX_("3",33,00,00,00)) ){
HXLINE( 202)			isNumber = true;
HXDLIN( 202)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_0==HX_("4",34,00,00,00)) ){
HXLINE( 204)			isNumber = true;
HXDLIN( 204)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_0==HX_("5",35,00,00,00)) ){
HXLINE( 206)			isNumber = true;
HXDLIN( 206)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_0==HX_("6",36,00,00,00)) ){
HXLINE( 208)			isNumber = true;
HXDLIN( 208)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_0==HX_("7",37,00,00,00)) ){
HXLINE( 210)			isNumber = true;
HXDLIN( 210)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_0==HX_("8",38,00,00,00)) ){
HXLINE( 212)			isNumber = true;
HXDLIN( 212)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_0==HX_("9",39,00,00,00)) ){
HXLINE( 214)			isNumber = true;
HXDLIN( 214)			goto _hx_goto_15;
            		}
            		/* default */{
HXLINE( 216)			isNumber = false;
            		}
            		_hx_goto_15:;
HXLINE( 219)		return isNumber;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Main_obj,isfirstCharNumber,return )


Main_obj::Main_obj()
{
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { outValue = ( timer ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"thread") ) { outValue = ( thread ); return true; }
		if (HX_FIELD_EQ(inName,"toBool") ) { outValue = toBool_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"fromXML") ) { outValue = fromXML_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"settings") ) { outValue = ( settings ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pingThread") ) { outValue = pingThread_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"returnTyped") ) { outValue = returnTyped_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isStringInt") ) { outValue = isStringInt_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"SystemReboot") ) { outValue = SystemReboot_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"isStringBool") ) { outValue = isStringBool_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"SystemShutdown") ) { outValue = SystemShutdown_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"iterateXMLNode") ) { outValue = iterateXMLNode_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"isfirstCharNumber") ) { outValue = isfirstCharNumber_dyn(); return true; }
	}
	return false;
}

bool Main_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"timer") ) { timer=ioValue.Cast<  ::haxe::Timer >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"thread") ) { thread=ioValue.Cast<  ::cpp::vm::Thread >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"settings") ) { settings=ioValue.Cast<  ::Dynamic >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Main_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(void *) &Main_obj::settings,HX_HCSTRING("settings","\xe3","\x7c","\x3d","\x8b")},
	{hx::fsObject /*::haxe::Timer*/ ,(void *) &Main_obj::timer,HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10")},
	{hx::fsObject /*::cpp::vm::Thread*/ ,(void *) &Main_obj::thread,HX_HCSTRING("thread","\xca","\x7a","\xb9","\x8e")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Main_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Main_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Main_obj::settings,"settings");
	HX_MARK_MEMBER_NAME(Main_obj::timer,"timer");
	HX_MARK_MEMBER_NAME(Main_obj::thread,"thread");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Main_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Main_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Main_obj::settings,"settings");
	HX_VISIT_MEMBER_NAME(Main_obj::timer,"timer");
	HX_VISIT_MEMBER_NAME(Main_obj::thread,"thread");
};

#endif

hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_HCSTRING("settings","\xe3","\x7c","\x3d","\x8b"),
	HX_HCSTRING("timer","\xc5","\xbf","\x35","\x10"),
	HX_HCSTRING("thread","\xca","\x7a","\xb9","\x8e"),
	HX_HCSTRING("main","\x39","\x38","\x56","\x48"),
	HX_HCSTRING("pingThread","\xdc","\x42","\xb6","\xb7"),
	HX_HCSTRING("SystemReboot","\xd4","\xf1","\x6a","\xa8"),
	HX_HCSTRING("SystemShutdown","\xc5","\xea","\xdc","\xf6"),
	HX_HCSTRING("fromXML","\x8d","\x22","\x06","\x58"),
	HX_HCSTRING("iterateXMLNode","\x9f","\x00","\x97","\xd5"),
	HX_HCSTRING("returnTyped","\x9a","\x3d","\xa8","\x27"),
	HX_HCSTRING("isStringBool","\x25","\x3e","\x37","\xc5"),
	HX_HCSTRING("toBool","\x45","\xef","\xd4","\x76"),
	HX_HCSTRING("isStringInt","\x54","\xeb","\x36","\xa6"),
	HX_HCSTRING("isfirstCharNumber","\xe5","\x51","\xc6","\x6f"),
	::String(null())
};

void Main_obj::__register()
{
	hx::Object *dummy = new Main_obj;
	Main_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("Main","\x59","\x64","\x2f","\x33");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &Main_obj::__SetStatic;
	__mClass->mMarkFunc = Main_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Main_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Main_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

